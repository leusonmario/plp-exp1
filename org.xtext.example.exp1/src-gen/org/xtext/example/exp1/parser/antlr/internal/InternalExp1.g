/*
 * generated by Xtext 2.9.2
 */
grammar InternalExp1;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.exp1.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.exp1.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.exp1.services.Exp1GrammarAccess;

}

@parser::members {

 	private Exp1GrammarAccess grammarAccess;

    public InternalExp1Parser(TokenStream input, Exp1GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Exp1";
   	}

   	@Override
   	protected Exp1GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleExp1
entryRuleExp1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExp1Rule()); }
	iv_ruleExp1=ruleExp1
	{ $current=$iv_ruleExp1.current; }
	EOF;

// Rule Exp1
ruleExp1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExp1Access().getExpressoesExpressaoParserRuleCall_0());
			}
			lv_expressoes_0_0=ruleExpressao
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getExp1Rule());
				}
				add(
					$current,
					"expressoes",
					lv_expressoes_0_0,
					"org.xtext.example.exp1.Exp1.Expressao");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleExpressao
entryRuleExpressao returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressaoRule()); }
	iv_ruleExpressao=ruleExpressao
	{ $current=$iv_ruleExpressao.current.getText(); }
	EOF;

// Rule Expressao
ruleExpressao returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressaoAccess().getExpCondicionalOrParserRuleCall());
	}
	this_ExpCondicionalOr_0=ruleExpCondicionalOr
	{
		$current.merge(this_ExpCondicionalOr_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleExpCondicionalOr
entryRuleExpCondicionalOr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpCondicionalOrRule()); }
	iv_ruleExpCondicionalOr=ruleExpCondicionalOr
	{ $current=$iv_ruleExpCondicionalOr.current.getText(); }
	EOF;

// Rule ExpCondicionalOr
ruleExpCondicionalOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpCondicionalOrAccess().getExpCondicionalAndParserRuleCall_0());
		}
		this_ExpCondicionalAnd_0=ruleExpCondicionalAnd
		{
			$current.merge(this_ExpCondicionalAnd_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='or'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpCondicionalOrAccess().getOrKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getExpCondicionalOrAccess().getExpCondicionalAndParserRuleCall_1_1());
			}
			this_ExpCondicionalAnd_2=ruleExpCondicionalAnd
			{
				$current.merge(this_ExpCondicionalAnd_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleExpCondicionalAnd
entryRuleExpCondicionalAnd returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpCondicionalAndRule()); }
	iv_ruleExpCondicionalAnd=ruleExpCondicionalAnd
	{ $current=$iv_ruleExpCondicionalAnd.current.getText(); }
	EOF;

// Rule ExpCondicionalAnd
ruleExpCondicionalAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpCondicionalAndAccess().getExpIgualdadeParserRuleCall_0());
		}
		this_ExpIgualdade_0=ruleExpIgualdade
		{
			$current.merge(this_ExpIgualdade_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='and'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpCondicionalAndAccess().getAndKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getExpCondicionalAndAccess().getExpIgualdadeParserRuleCall_1_1());
			}
			this_ExpIgualdade_2=ruleExpIgualdade
			{
				$current.merge(this_ExpIgualdade_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleExpIgualdade
entryRuleExpIgualdade returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpIgualdadeRule()); }
	iv_ruleExpIgualdade=ruleExpIgualdade
	{ $current=$iv_ruleExpIgualdade.current.getText(); }
	EOF;

// Rule ExpIgualdade
ruleExpIgualdade returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpIgualdadeAccess().getExpAritmeticaParserRuleCall_0());
		}
		this_ExpAritmetica_0=ruleExpAritmetica
		{
			$current.merge(this_ExpAritmetica_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='=='
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpIgualdadeAccess().getEqualsSignEqualsSignKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getExpIgualdadeAccess().getExpAritmeticaParserRuleCall_1_1());
			}
			this_ExpAritmetica_2=ruleExpAritmetica
			{
				$current.merge(this_ExpAritmetica_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleExpAritmetica
entryRuleExpAritmetica returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpAritmeticaRule()); }
	iv_ruleExpAritmetica=ruleExpAritmetica
	{ $current=$iv_ruleExpAritmetica.current.getText(); }
	EOF;

// Rule ExpAritmetica
ruleExpAritmetica returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpAritmeticaAccess().getExpConcatenacaoParserRuleCall_0());
		}
		this_ExpConcatenacao_0=ruleExpConcatenacao
		{
			$current.merge(this_ExpConcatenacao_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				kw='+'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getExpAritmeticaAccess().getPlusSignKeyword_1_0_0());
				}
				    |
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getExpAritmeticaAccess().getHyphenMinusKeyword_1_0_1());
				}
			)
			{
				newCompositeNode(grammarAccess.getExpAritmeticaAccess().getExpConcatenacaoParserRuleCall_1_1());
			}
			this_ExpConcatenacao_3=ruleExpConcatenacao
			{
				$current.merge(this_ExpConcatenacao_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleExpConcatenacao
entryRuleExpConcatenacao returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpConcatenacaoRule()); }
	iv_ruleExpConcatenacao=ruleExpConcatenacao
	{ $current=$iv_ruleExpConcatenacao.current.getText(); }
	EOF;

// Rule ExpConcatenacao
ruleExpConcatenacao returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpConcatenacaoAccess().getExpUnariaParserRuleCall_0());
		}
		this_ExpUnaria_0=ruleExpUnaria
		{
			$current.merge(this_ExpUnaria_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='++'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpConcatenacaoAccess().getPlusSignPlusSignKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getExpConcatenacaoAccess().getExpUnariaParserRuleCall_1_1());
			}
			this_ExpUnaria_2=ruleExpUnaria
			{
				$current.merge(this_ExpUnaria_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleExpUnaria
entryRuleExpUnaria returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpUnariaRule()); }
	iv_ruleExpUnaria=ruleExpUnaria
	{ $current=$iv_ruleExpUnaria.current.getText(); }
	EOF;

// Rule ExpUnaria
ruleExpUnaria returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpUnariaAccess().getHyphenMinusKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getExpUnariaAccess().getExpressaoParserRuleCall_0_1());
			}
			this_Expressao_1=ruleExpressao
			{
				$current.merge(this_Expressao_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='not'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpUnariaAccess().getNotKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getExpUnariaAccess().getExpressaoParserRuleCall_1_1());
			}
			this_Expressao_3=ruleExpressao
			{
				$current.merge(this_Expressao_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			kw='length'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpUnariaAccess().getLengthKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getExpUnariaAccess().getExpressaoParserRuleCall_2_1());
			}
			this_Expressao_5=ruleExpressao
			{
				$current.merge(this_Expressao_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getExpUnariaAccess().getValorConcretoParserRuleCall_3());
		}
		this_ValorConcreto_6=ruleValorConcreto
		{
			$current.merge(this_ValorConcreto_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleValorConcreto
entryRuleValorConcreto returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValorConcretoRule()); }
	iv_ruleValorConcreto=ruleValorConcreto
	{ $current=$iv_ruleValorConcreto.current.getText(); }
	EOF;

// Rule ValorConcreto
ruleValorConcreto returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_VALORINTEIRO_0=RULE_VALORINTEIRO
		{
			$current.merge(this_VALORINTEIRO_0);
		}
		{
			newLeafNode(this_VALORINTEIRO_0, grammarAccess.getValorConcretoAccess().getVALORINTEIROTerminalRuleCall_0());
		}
		    |
		this_VALORBOOLEANO_1=RULE_VALORBOOLEANO
		{
			$current.merge(this_VALORBOOLEANO_1);
		}
		{
			newLeafNode(this_VALORBOOLEANO_1, grammarAccess.getValorConcretoAccess().getVALORBOOLEANOTerminalRuleCall_1());
		}
		    |
		this_VALORSTRING_2=RULE_VALORSTRING
		{
			$current.merge(this_VALORSTRING_2);
		}
		{
			newLeafNode(this_VALORSTRING_2, grammarAccess.getValorConcretoAccess().getVALORSTRINGTerminalRuleCall_2());
		}
	)
;

RULE_VALORINTEIRO : '1'..'9' ('0'..'9')*;

RULE_VALORBOOLEANO : ('true'|'false');

RULE_VALORSTRING : ('a'..'z')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
